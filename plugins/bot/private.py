"""
This Project Under Team-Silentüíû < @SILENT_DEVS >
Orgination Github Of this TeamSilent < https://github.com/TeamSilentt > Check out
Creator Or Dev @HYPER_AD13 | @SHINING_OFF <Found On telegram>
Found on github < https://github.com/HYPER-AD17 >
¬©Team Silent‚Ñ¢
"""
import asyncio
from config import Config
from utils import USERNAME, mp
from pyrogram import Client, filters, emoji
from pyrogram.errors import MessageNotModified
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

msg=Config.msg
ADMINS=Config.ADMINS
CHAT_ID=Config.CHAT_ID
playlist=Config.playlist
LOG_GROUP=Config.LOG_GROUP

HOME_TEXT = "üëãüèª ** ú·¥á ü ü·¥è [{}](tg://user?id={})**,\n\n…™ ·¥ç **·¥ç·¥ú·¥ã ú·¥ús ú…™  Ä·¥Ä·¥Ö…™·¥è s·¥õ Ä·¥á·¥Ä·¥ç·¥á Ä** \n…™ ·¥Ñ·¥Ä…¥ ·¥ò ü·¥Ä è  Ä·¥Ä·¥Ö…™·¥è / ·¥ç·¥ús…™·¥Ñ /  è·¥è·¥ú·¥õ·¥ú ô·¥á  ü…™·¥†·¥á …™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü & …¢ Ä·¥è·¥ú·¥ò 24x7 …¥·¥è…¥s·¥õ·¥è·¥ò. ·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú üë©‚Äçüíª  ô è ·¥ç·¥Äs·¥õ·¥á Ä·¥ç…™…¥·¥Ö …¥·¥á·¥õ·¥°·¥è Ä·¥ã üßö‚Äç‚ôÄÔ∏è!"
HELP_TEXT = """
üí° --**s·¥á·¥õ·¥õ…™…¥…¢  Ä·¥Ä·¥Ö…™·¥è  Ä·¥è ô·¥è**--:

‚ú¶ `·¥Ä·¥Ö·¥Ö ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä…¥·¥Ö ·¥ús·¥á Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥°…™·¥õ ú ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs.`
‚ú¶ `s·¥õ·¥Ä Ä·¥õ ·¥Ä ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò &  Ä·¥ás·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ …™Íú∞ …¥·¥è·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö ·¥õ·¥è ·¥†·¥Ñ.`
‚ú¶ `·¥ús·¥á` /splay `[s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á] ·¥è Ä ·¥ús·¥á` /splay `·¥Äs ·¥Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ ·¥Ä·¥ú·¥Ö…™·¥è Íú∞…™ ü·¥á ·¥è Ä  è·¥è·¥ú·¥õ·¥ú ô·¥á  ü…™…¥·¥ã.`

üí° --**·¥Ñ·¥è·¥ç·¥ç·¥è…¥ ·¥ús·¥á Ä ·¥Ñ·¥ç·¥Ös**--:

‚ú¶ /help - `s ú·¥è·¥°s  ú·¥á ü·¥ò Íú∞·¥è Ä ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös`
‚ú¶ /song [s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á] - `·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥õ ú·¥á s·¥è…¥…¢ ·¥Äs ·¥Ä·¥ú·¥Ö…™·¥è‚Äã`
‚ú¶ /current - `s ú·¥è·¥°s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥°…™·¥õ ú ·¥Ñ·¥è…¥·¥õ Ä·¥è üs`‚Äã
‚ú¶ /playlist - `s ú·¥è·¥°s ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ & «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥ò ü·¥Ä è ü…™s·¥õ‚Äã`

üí° --**·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös**--:

‚ú¶ /radio - `s·¥õ·¥Ä Ä·¥õ  Ä·¥Ä·¥Ö…™·¥è.`
‚ú¶ /stopradio - `s·¥õ·¥è·¥ò  Ä·¥Ä·¥Ö…™·¥è.`
‚ú¶ /next - `·¥ç·¥è·¥†·¥á ·¥õ·¥è …¥·¥áx·¥õ s·¥è…¥…¢.`
‚ú¶ /joinvc - `·¥ä·¥è…™…¥ ·¥†·¥Ñ ·¥Ñ ú·¥Ä·¥õ.`
‚ú¶ /leavevc - ` ü·¥á·¥Ä·¥†·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ.`
‚ú¶ /end - `·¥á…¥·¥Ö ·¥ò ü·¥Ä è ô·¥Ä·¥Ñ·¥ã`
‚ú¶ /vol - `·¥Ñ ú·¥Ä…¥…¢·¥á ·¥†·¥è ü·¥ú·¥ç·¥á (0-200)`
‚ú¶ /rplay - `·¥ò ü·¥Ä è “ì Ä·¥è·¥ç s·¥õ·¥Ä Ä·¥õ…™…¥…¢`
‚ú¶ /rms - `·¥Ñ ü·¥á·¥Ä Ä ·¥Ñ·¥ò·¥ú ·¥è“ì  ô·¥è·¥õ`
‚ú¶ /pause - `·¥ò·¥Ä·¥ús·¥á s·¥õ Ä·¥á·¥Ä·¥ç`
‚ú¶ /resume - ` Ä·¥ás·¥ú·¥ç·¥á s·¥õ Ä·¥á·¥Ä·¥ç`
‚ú¶ /pmute - `·¥ç·¥ú·¥õ·¥á ·¥Äss…™s·¥õ·¥á…¥·¥õ`
‚ú¶ /punmute - `·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥Äss…™s·¥õ·¥á…¥·¥õ`
‚ú¶ /restart - ` Ä·¥ás·¥õ·¥Ä Ä·¥õ  Ä·¥è ô·¥è·¥õ`

`‚û¨‚û¨ P·¥è·¥°·¥á Ä·¥á·¥Ö B è C·¥è…¥·¥õ Ä·¥è ü ü·¥á Ä ·¥ç·¥Äs·¥õ·¥á Ä·¥ç…™…¥·¥Ö …¥·¥á·¥õ·¥°·¥è Ä·¥ãüíû`
 @mr_sukkun‚ú®,
"""

# /setvar - `·¥Ñ ú·¥Ä…¥…¢·¥á  ú·¥á Ä·¥è·¥ã·¥ú ·¥Ñ·¥è…¥“ì…™…¢/·¥†·¥Ä Äs`

@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    if query.from_user.id not in Config.ADMINS and query.data != "help":
        await query.answer(
            " ü·¥Ä ü·¥Ä ·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥ò·¥á Ä·¥ç…™·¥õ…™·¥è…¥",
            show_alert=True
            )
        return

    if query.data.lower() == "rplay":
        group_call = mp.group_call
        if not playlist:
            await query.answer("‚õîÔ∏è ·¥ò ü·¥Ä è ü…™s·¥õ ·¥á·¥ç·¥ò·¥õ è !", show_alert=True)
            return
        group_call.restart_playout()
        if not playlist:
            pl = f"{emoji.NO_ENTRY} **·¥ò ü·¥Ä è ü…™s·¥õ ·¥á·¥ç·¥ò·¥õ è**"
        else:
            pl = f"{emoji.PLAY_BUTTON} **·¥ò ü·¥Ä è ü…™s·¥õ**:\n" + "\n".join([
                f"**{i}**. **{x[1]}**\n  - ** Ä·¥á«´·¥ú·¥ás·¥õ·¥á Ä:** {x[4]}"
                for i, x in enumerate(playlist)
                ])
        try:
            await query.answer("‚úÖ  Ä·¥á·¥ò ü è…™…¥…¢ !", show_alert=True)
            await query.edit_message_text(f"{pl}",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton("üåÄ", callback_data="rplay"),
                                InlineKeyboardButton("II", callback_data="pause"),
                                InlineKeyboardButton("‚Ä£‚Ä£", callback_data="next")
                            ],
                            [
                                InlineKeyboardButton("·¥ç·¥è Ä·¥á", url="https://t.me/mr_sukkun"),
                                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"),
                            ],
                        ]
                    )
                )
        except MessageNotModified:
            pass

    elif query.data.lower() == "pause":
        if not playlist:
            await query.answer("‚õîÔ∏è ·¥ò ü·¥Ä è ü…™s·¥õ ·¥á·¥ç·¥ò·¥õ è !", show_alert=True)
            return
        else:
            mp.group_call.pause_playout()
            pl = f"{emoji.PLAY_BUTTON} **·¥ò ü·¥Ä è ü…™s·¥õ**:\n" + "\n".join([
                f"**{i}**. **{x[1]}**\n  ** Ä·¥á«´·¥ú·¥ás·¥õ·¥á Ä:** {x[4]}"
                for i, x in enumerate(playlist)
                ])
        try:
            await query.answer("‚è∏ ·¥ò·¥Ä·¥ús·¥á·¥Ö !", show_alert=True)
            await query.edit_message_text(f"{pl}",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton("üåÄ", callback_data="rplay"),
                                InlineKeyboardButton("II", callback_data="resume"),
                                InlineKeyboardButton("‚Ä£‚Ä£", callback_data="next")
                            ],
                            [
                                InlineKeyboardButton("·¥ç·¥è Ä·¥á", url="https://t.me/mr_sukkun"),
                                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"),
                            ],
                        ]
                    )
                )
        except MessageNotModified:
            pass

    elif query.data.lower() == "resume":   
        if not playlist:
            await query.answer("‚õîÔ∏è ·¥ò ü·¥Ä è ü…™s·¥õ ·¥á·¥ç·¥ò·¥õ è !", show_alert=True)
            return
        else:
            mp.group_call.resume_playout()
            pl = f"{emoji.PLAY_BUTTON} **·¥ò ü·¥Ä è ü…™s·¥õ**:\n" + "\n".join([
                f"**{i}**. **{x[1]}**\n  - ** Ä·¥á«´·¥ú·¥ás·¥õ·¥á Ä:** {x[4]}"
                for i, x in enumerate(playlist)
                ])
        try:
            await query.answer("‚ñ∂Ô∏è  Ä·¥ás·¥ú·¥ç·¥á·¥Ö !", show_alert=True)
            await query.edit_message_text(f"{pl}",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton("üåÄ", callback_data="rplay"),
                                InlineKeyboardButton("II", callback_data="pause"),
                                InlineKeyboardButton("‚Ä£‚Ä£", callback_data="next")
                            ],
                            [
                                InlineKeyboardButton("·¥ç·¥è Ä·¥á", url="https://t.me/mr_sukkun"),
                                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"),
                            ],
                        ]
                    )
                )
        except MessageNotModified:
            pass

    elif query.data.lower() == "next":   
        if not playlist:
            await query.answer("‚õîÔ∏è ·¥ò ü·¥Ä è ü…™s·¥õ ·¥á·¥ç·¥ò·¥õ è !", show_alert=True)
            return
        else:
            await mp.skip_current_playing()
            pl = f"{emoji.PLAY_BUTTON} **·¥ò ü·¥Ä è ü…™s·¥õ**:\n" + "\n".join([
                f"**{i}**. **{x[1]}**\n  - ** Ä·¥á«´·¥ú·¥ás·¥õ·¥á Ä:** {x[4]}"
                for i, x in enumerate(playlist)
                ])
        try:
            await query.answer("‚è© ·¥ç·¥è·¥†·¥á·¥Ö ·¥õ·¥è …¥·¥áx·¥õ !", show_alert=True)
            await query.edit_message_text(f"{pl}",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton("üåÄ", callback_data="rplay"),
                                InlineKeyboardButton("II", callback_data="pause"),
                                InlineKeyboardButton("‚Ä£‚Ä£", callback_data="next")
                            ],
                            [
                                InlineKeyboardButton("·¥ç·¥è Ä·¥á", url="https://t.me/mr_sukkun"),
                                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"),
                            ],
                        ]
                    )
                )
        except MessageNotModified:
            pass

    elif query.data.lower() == "help":
        buttons = [      
            [
                InlineKeyboardButton("·¥ç·¥Äs·¥õ·¥á Ä·¥ç…™…¥·¥Öüßö‚Äç‚ôÄÔ∏è", url="https://t.me/mastermind_network_official"),
                InlineKeyboardButton("…¢·¥è …™…¥ ü…™…¥·¥áüë©‚Äçüíª", switch_inline_query_current_chat=""),
            ],           
            [
                InlineKeyboardButton("…¢·¥è  ô·¥Ä·¥Ñ·¥ãüíÅ‚Äç‚ôÇÔ∏è", callback_data="home"),
                InlineKeyboardButton("·¥Ñ ü·¥ès·¥áüóëÔ∏è", callback_data="close"),
            ],
            ]
        reply_markup = InlineKeyboardMarkup(buttons)
        try:
            await query.edit_message_text(
                HELP_TEXT,
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass

    elif query.data.lower() == "home":
        buttons = [
            [
                InlineKeyboardButton("·¥ç·¥Äs·¥õ·¥á Ä·¥ç…™…¥·¥Öüßö‚Äç‚ôÄÔ∏è", url="https://t.me/mastermind_network_official"),
                InlineKeyboardButton("…¢·¥è …™…¥ ü…™…¥·¥áüë©‚Äçüíª", switch_inline_query_current_chat=""),
            ],
            [
                InlineKeyboardButton(" ú·¥á ü·¥ò …¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ösüí´", callback_data="help"),
            ],
            ]
        reply_markup = InlineKeyboardMarkup(buttons)
        try:
            await query.edit_message_text(
                HOME_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass

    elif query.data.lower() == "close":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
        except:
            pass

    await query.answer()



@Client.on_message(filters.command(["start", f"start@{USERNAME}"]))
async def start(client, message):
    buttons = [
            [
                InlineKeyboardButton("·¥ç·¥Äs·¥õ·¥á Ä·¥ç…™…¥·¥Öüßö‚Äç‚ôÄÔ∏è", url="https://t.me/mastermind_network_official"),
                InlineKeyboardButton("…¢·¥è …™…¥ ü…™…¥·¥áüë©‚Äçüíª", switch_inline_query_current_chat=""),
            ],
            [
                InlineKeyboardButton(" ú·¥á ü·¥ò …¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ösüí´", callback_data="help"),
            ],
            ]
    reply_markup = InlineKeyboardMarkup(buttons)
    m=await message.reply_photo(photo="https://telegra.ph/file/00a7f41225be419fade0b.jpg", caption=HOME_TEXT.format(message.from_user.first_name, message.from_user.id), reply_markup=reply_markup)
    await mp.delete(m)
    await mp.delete(message)


@Client.on_message(filters.command(["help", f"help@{USERNAME}"]))
async def help(client, message):
    buttons = [
            [
                InlineKeyboardButton("·¥ç·¥Äs·¥õ·¥á Ä·¥ç…™…¥·¥Öüßö‚Äç‚ôÄÔ∏è", url="https://t.me/mastermind_network_official"),
                InlineKeyboardButton("…¢·¥è …™…¥ ü…™…¥·¥áüë©‚Äçüíª", switch_inline_query_current_chat=""),
            ],           
            [
                InlineKeyboardButton("…¢·¥è  ô·¥Ä·¥Ñ·¥ãüíÅ‚Äç‚ôÇÔ∏è", callback_data="home"),
                InlineKeyboardButton("·¥Ñ ü·¥ès·¥áüóëÔ∏è", callback_data="close"),
            ],
            ]
    reply_markup = InlineKeyboardMarkup(buttons)
    if msg.get('help') is not None:
        await msg['help'].delete()
    msg['help'] = await message.reply_photo(photo="https://telegra.ph/file/00a7f41225be419fade0b.jpg", caption=HELP_TEXT, reply_markup=reply_markup)
    await mp.delete(message)


@Client.on_message(filters.command(["setvar", f"setvar@{USERNAME}"]) & filters.user(ADMINS) & (filters.chat(CHAT_ID) | filters.private | filters.chat(LOG_GROUP)))
async def set_heroku_var(client, message):
    if not Config.HEROKU_APP:
        buttons = [[InlineKeyboardButton('HEROKU_API_KEY', url='https://dashboard.heroku.com/account/applications/authorizations/new')]]
        k=await message.reply_text(
            text="‚ùó **No Heroku App Found !** \n__Please Note That, This Command Needs The Following Heroku Vars To Be Set :__ \n\n1. `HEROKU_API_KEY` : Your heroku account api key.\n2. `HEROKU_APP_NAME` : Your heroku app name. \n\n**For More Ask In @worldwide_friend_zone !!**", 
            reply_markup=InlineKeyboardMarkup(buttons))
        await mp.delete(k)
        await mp.delete(message)
        return
    if " " in message.text:
        cmd, env = message.text.split(" ", 1)
        if  not "=" in env:
            k=await message.reply_text("‚ùó **You Should Specify The Value For Variable!** \n\nFor Example: \n`/setvar CHAT_ID=-1001613182747`")
            await mp.delete(k)
            await mp.delete(message)
            return
        var, value = env.split("=", 2)
        config = Config.HEROKU_APP.config()
        if not value:
            m=await message.reply_text(f"‚ùó **No Value Specified, So Deleting `{var}` Variable !**")
            await asyncio.sleep(2)
            if var in config:
                del config[var]
                await m.edit(f"·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥ás“ì·¥ú ü ü è `{var}` !")
                config[var] = None
            else:
                await m.edit(f"üòï ·¥†·¥Ä Ä …¥·¥Ä·¥ç·¥á `{var}` ·¥ú…¥·¥Ä ô ü·¥á ·¥õ·¥è “ì…™…¥·¥Ö, s ú ú !")
            return
        if var in config:
            m=await message.reply_text(f"üî•  è·¥è ·¥†·¥Ä Ä…™·¥Ä ô ü·¥á ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥õ·¥è `{value}` !**")
        else:
            m=await message.reply_text(f"·¥è·¥ã ·¥ç·¥Ä·¥ã…™…¥…¢ ·¥†·¥Ä Ä…™·¥Ä ô ü·¥áüôã‚Äç‚ôÄÔ∏è.")
        await asyncio.sleep(2)
        await m.edit(f"‚úÖ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö `{var}` ·¥°…™·¥õ ú `{value}`,  ú·¥ú ú ·¥°·¥Ä…™·¥õ ·¥õ·¥è  Ä·¥ás·¥õ·¥Ä Ä·¥õ !")
        config[var] = str(value)
        await mp.delete(m)
        await mp.delete(message)
        return
    else:
        k=await message.reply_text("ü§î ·¥° ú·¥Ä·¥õ s ú·¥è·¥ú ü·¥Ö …™ ·¥ç·¥Ä·¥ã·¥á ·¥Ä ·¥†·¥Ä Ä “ì·¥è Ä …¢…™·¥† ·¥ç·¥á ·¥Ä ·¥†·¥Ä ü·¥ú·¥á ·¥è“ì …™·¥õ.  \n\n·¥áx·¥Ä·¥ç·¥ò ü·¥á: \n‚Ä¢ `/setvar CHAT_ID=-1001613182747` ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥è Ä s·¥á·¥õ `CHAT` ·¥†·¥Ä Ä. \n‚Ä¢ `/setvar REPLY_MESSAGE=` ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥è ü·¥Ö ·¥†·¥Ä Ä ·¥è“ì `REPLY_MESSAGE ·¥è Ä …¢…™·¥†·¥á…¥ ·¥†·¥Ä Ä…™·¥Ä ô ü·¥á`.")
        await mp.delete(k)
        await mp.delete(message)
